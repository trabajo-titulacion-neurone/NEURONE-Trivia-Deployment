---
# tasks file for TRAINER-prod
- name: Get Node.js version
  ansible.builtin.command: "node --version"
  register: node_version

- name: Clone or update trainer repository
  ansible.builtin.git:
    repo: "{{ trainer_repository }}"
    dest: "{{ ansible_env.HOME }}{{ trainer_directory }}"
    clone: yes
    update: yes
    force: yes #This is added due to an issue with modifying the package-lock.json in the local repository.

- name: Install trainer-client dependencies
  community.general.npm:
    path: "{{ ansible_env.HOME }}{{ trainer_client_directory }}"
    executable: "{{ ansible_env.HOME }}/.nvm/versions/node/{{ node_version.stdout }}/bin/npm"
  

- name: Synchronize environment.prod.ts file of Trainer Client from localhost where playbook runs
  ansible.posix.synchronize:
    src: "{{ trainer_client_environment_prod_file_localhost }}"
    dest: "{{ ansible_env.HOME }}{{ trainer_client_environment_prod_file_remote_server }}"

- name: Rename the synchronized file to have the same name as the source file
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_client_directory }}/src/environments"
  ansible.builtin.command: >
    mv environment.prod.ts.example environment.prod.ts

- name: Rename the synchronized file to have the same name as the source file for environment.ts
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_client_directory }}/src/environments"
  ansible.builtin.command: >
    cp environment.prod.ts environment.ts

- name: Build Trainer frontend on remote server
  # become: true
  ansible.builtin.command: ng build --prod --output-path ../Server/public
  async: 2100  # 35 minutes in seconds
  poll: 0  # No polling, check status separately
  register: build_result
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_client_directory }}"
  when: build_trainer_frontend_on_server

- name: Wait for the build to finish
  # become: true
  ansible.builtin.async_status:
    jid: "{{ build_result.ansible_job_id }}"  
  register: job_result
  until: job_result.finished
  retries: 35
  delay: 60  # Retry every 60 seconds
  when: build_trainer_frontend_on_server

- name: Install trainer-server dependencies
  community.general.npm:
    path: "{{ ansible_env.HOME }}{{ trainer_server_directory }}"
    executable: "{{ ansible_env.HOME }}/.nvm/versions/node/{{ node_version.stdout }}/bin/npm"

- name: Synchronize .env file of Trainer Server from localhost where playbook runs
  ansible.posix.synchronize:
    src: "{{ trainer_server_config_file_localhost }}"
    dest: "{{ ansible_env.HOME }}{{ trainer_server_config_file_remote_server }}"

- name: Rename the synchronized file to have the same name as the source file for .env
  become: true
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_server_directory}}"
  ansible.builtin.command: >
    mv .env.example .env

#Saved processes are restored in case of a server reboot
- name: pm2 resurrect
  ansible.builtin.command: pm2 resurrect

- name: Run the command "pm2 ls"
  ansible.builtin.command: pm2 ls
  register: pm2_processes

- name: Analyse the output looking for the 'trainer-server' process
  #The boolean response is stored in the variable 'running_process'.
  ansible.builtin.set_fact:
    running_process: "{{ trainer_server_pm2_process_name in pm2_processes.stdout }}"


- name: Execute the PM2 command (restart) if the process is running
  ansible.builtin.command: pm2 restart {{ trainer_server_pm2_process_name }}
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_server_directory }}"
  when: running_process

- name: Execute the PM2 command (start) if the process is not running or not created.
  ansible.builtin.command: pm2 start app.js --name {{ trainer_server_pm2_process_name }}
  args:
    chdir: "{{ ansible_env.HOME }}{{ trainer_server_directory }}"
  when: not running_process

# Save current process list
- name: pm2 save
  ansible.builtin.command: pm2 save

