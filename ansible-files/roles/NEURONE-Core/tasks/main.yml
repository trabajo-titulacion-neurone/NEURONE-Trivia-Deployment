# ---
# tasks file for NEURONE-Core
- name: Update apt and install ca-certificates
  become: true
  apt:
    name: ca-certificates
    state: latest
    update_cache: true

- name: Update apt and install curl
  become: true
  apt:
    name: curl
    state: latest
    update_cache: true

- name: Update apt and install gnupg
  become: true
  apt:
    name: gnupg
    state: latest
    update_cache: true

- name: Update apt and install lsb-release
  become: true
  apt:
    name: lsb-release
    state: latest
    update_cache: true

- name: Clone or update neurone core repository
  git:
    repo: "{{ neurone_repository }}"
    dest: "{{ neurone_directory }}"
    clone: yes
    update: yes
    force: yes

- name: Load NEURONE-Core image
  ignore_errors: true
  become: true
  community.docker.docker_image:
    name: dgacitua/neurone
    load_path: "{{ neurone_core_images_path }}/neurone.tar"
    source: load
    state: present

- name: Load MongoDB image
  ignore_errors: true
  become: true
  community.docker.docker_image:
    name: dgacitua/mongo
    load_path: "{{ neurone_core_images_path }}/mongo.tar"
    source: load
    state: present

# - name: Crear carpetasssssssss
#   ignore_errors: true
#   become: true
#   ansible.builtin.shell: |
#     mkdir -p {{ ansible_env.HOME }}/neuroneAssets
#     mkdir -p {{ ansible_env.HOME }}/neuroneDatabase
#     mkdir -p {{ ansible_env.HOME }}/neuroneIndex && chown -R 8983:8983 {{ ansible_env.HOME }}/neuroneIndex
#   args:
#     chdir: "{{ neurone_directory }}"
#     executable: /bin/bash
  # when: build_neurone_core_on_server
  # register: build_result

- name: Create Neurone directories
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ ansible_env.HOME }}/neuroneAssets", owner: "{{ ansible_user }}", group: "{{ ansible_user }}", mode: "0755" }
    - { path: "{{ ansible_env.HOME }}/neuroneDatabase", owner: "{{ ansible_user }}", group: "{{ ansible_user }}", mode: "0755" }
    - { path: "{{ ansible_env.HOME }}/neuroneIndex", owner: "8983", group: "8983", mode: "0755" }

- name: Build NEURONE-Core with script neurone-build.sh
  ignore_errors: true
  become: true
  ansible.builtin.shell: ./neurone-build.sh
  args:
    chdir: "{{ neurone_directory }}"
    executable: /bin/bash
  when: build_neurone_core_on_server
  register: build_result
  
- name: Build NEURONE-Core images with Docker Compose
  ignore_errors: true
  ansible.builtin.shell: docker-compose -p neurone build 
  become: true
  args:
    # executable: /bin/bash
    chdir: "{{ neurone_directory }}"
  when: build_neurone_core_on_server and build_result.rc != 0 #activate if flag build_neurone_core_on_server and if task "Run neurone-build.sh" is finish with error
  
- name: Start NEURONE-Core with Docker Compose
  ansible.builtin.shell:
  #docker compose -p neurone up --force-recreate -d
    cmd: |
      set -o allexport
      source {{ neurone_directory }}/dotenv
      set +o allexport
      docker compose -p neurone up -d
  become: true
  args:
    executable: /bin/bash
    chdir: "{{ neurone_directory }}"










#PROBANDINGGGGGGGGGGGGGGGGGGGG

# - name: Build NEURONE-Core images with Docker Compose
#   ignore_errors: true
#   ansible.builtin.shell: docker-compose -p neurone build 
#   become: true
#   args:
#     # executable: /bin/bash
#     chdir: "{{ neurone_directory }}"
#   when: build_neurone_core_on_server and build_result.rc != 0 #activate if flag build_neurone_core_on_server and if task "Run neurone-build.sh" is finish with error
#   async: 3600
#   poll: 0
#   register: build_neurone_result

# - name: Wait for asynchronous job to end
#   ansible.builtin.async_status:
#     jid: "{{ build_neurone_result.ansible_job_id }}" 
#   register: job_result
#   until: job_result.finished
#   retries: 360
#   delay: 10

# - name: Start NEURONE-Core with Docker Compose
#   ansible.builtin.shell:
#   #docker compose -p neurone up --force-recreate -d
#     cmd: |
#       set -o allexport
#       source {{ neurone_directory }}/dotenv
#       set +o allexport
#       docker compose -p neurone up -d
#   become: true
#   args:
#     executable: /bin/bash
#     chdir: "{{ neurone_directory }}"
#   when: job_result.finished



























# - name: Start NEURONE with Docker Compose
#   ignore_errors: true
#   become: true
#   ansible.builtin.command: docker compose -p neurone up --force-recreate -d
#   args:
#     chdir: "{{ neurone_directory }}"


