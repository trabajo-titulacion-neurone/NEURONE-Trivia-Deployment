---
# tasks file for GAME
- name: Get Node.js version
  ansible.builtin.command: "node --version"
  register: node_version

# - name: Create build-of-trivia directory
#   become: true
#   ansible.builtin.file:
#     path: "{{ directory_of_build_of_trivia_sent }}"
#     state: directory
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"

  # ############### Build NEURONE-Core on localhost and send to remote server #######################################

- name: Get the home directory of the user running the playbook on the control machine
  ansible.builtin.set_fact:
    local_home: "{{ lookup('env', 'HOME') }}"
  delegate_to: localhost
  when: build_and_send_trivia_frontend_from_localhost

- name: Clone or update trivia repository on localhost
  ansible.builtin.git:
    repo: "{{ trivia_repository }}"
    dest: "{{ local_home }}{{ trivia_directory }}"
    clone: yes
    update: yes
    force: yes
  delegate_to: localhost 
  when: build_and_send_trivia_frontend_from_localhost


- name: Install trivia-client dependencies on localhost
  ansible.builtin.shell: npm install
  args:
    chdir: "{{ local_home }}{{ trivia_client_directory }}"
  delegate_to: localhost
  when: build_and_send_trivia_frontend_from_localhost

- name: Build Trivia Frontend on Localhost
  ansible.builtin.shell: ng build --prod --output-path ../Server/public
  args:
    chdir: "{{ local_home }}{{ trivia_client_directory  }}"
  delegate_to: localhost
  when: build_and_send_trivia_frontend_from_localhost

  ##################################################################################################################

- name: Clone or update trivia repository
  ansible.builtin.git:
    repo: "{{ trivia_repository }}"
    dest: "{{ ansible_env.HOME }}{{ trivia_directory }}"
    clone: yes
    update: yes
    force: yes #This is added due to an issue with modifying the package-lock.json in the local repository.

- name: Install trivia-client dependencies.
  community.general.npm:
    path: "{{ ansible_env.HOME }}{{ trivia_client_directory }}"
    executable: "{{ ansible_env.HOME }}/.nvm/versions/node/{{ node_version.stdout }}/bin/npm"
    
- name: Check if the public folder exists or was sent by Github Actions
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}{{ directory_of_build_of_trivia_sent }}"
  register: public_folder

- name: Load build of Trivia sent by Github Actions
  become: true
  ansible.posix.synchronize:
    src: "{{ ansible_env.HOME }}/build-trivia-frontend/public"
    dest: "{{ ansible_env.HOME }}{{ trivia_server_directory }}"
  delegate_to: "{{ inventory_hostname }}"
  when: public_folder.stat.isdir is defined and public_folder.stat.isdir and build_and_send_trivia_frontend_from_localhost == false
    
- name: Synchronize build of Trivia from localhost where playbook runs
  ansible.posix.synchronize:
    src: "{{ local_home }}{{ trivia_server_directory }}/public"
    dest: "{{ ansible_env.HOME }}{{ trivia_server_directory }}"
  when: build_and_send_trivia_frontend_from_localhost

- name: Build Trivia frontend on remote server
  become: true
  ansible.builtin.command: ng build --prod --output-path ../Server/public
  args:
    chdir: "{{ ansible_env.HOME }}{{ trivia_client_directory }}"
  when: build_trivia_frontend_on_server

- name: Install trivia-server dependencies.
  community.general.npm:
    path: "{{ ansible_env.HOME }}{{ trivia_server_directory }}"
    executable: "{{ ansible_env.HOME }}/.nvm/versions/node/{{ node_version.stdout }}/bin/npm"

#Saved processes are restored in case of a server reboot
- name: pm2 resurrect
  ansible.builtin.command: pm2 resurrect

- name: Run the command "pm2 ls"
  ansible.builtin.command: pm2 ls
  register: pm2_processes

- name: Analyse the output looking for the 'trivia-server' process
  #The boolean response is stored in the variable 'running_process'.
  ansible.builtin.set_fact:
    running_process: "{{ trivia_server_pm2_process_name in pm2_processes.stdout }}"


- name: Execute the PM2 command (restart) if the process is running
  ansible.builtin.command: pm2 restart {{ trivia_server_pm2_process_name }}
  args:
    chdir: "{{ ansible_env.HOME }}{{ trivia_server_directory }}"
  when: running_process

- name: Execute the PM2 command (start) if the process is not running or not created.
  ansible.builtin.command: pm2 start app.js --name {{ trivia_server_pm2_process_name }}
  args:
    chdir: "{{ ansible_env.HOME }}{{ trivia_server_directory }}"
  when: not running_process

# Save current process list
- name: pm2 save
  ansible.builtin.command: pm2 save